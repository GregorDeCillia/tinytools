% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lappli.R
\name{lappli}
\alias{lappli}
\alias{sappli}
\title{Improve \code{lapply()} and \code{sapply()} by passing on item index and item name}
\usage{
lappli(X, FUN, ...)

sappli(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)
}
\arguments{
\item{X}{a vector (atomic or list) or an \code{\link[base]{expression}}
    object.  Other objects (including classed objects) will be coerced
    by \code{base::\link[base]{as.list}}.}

\item{FUN}{Here comes the great difference to \code{\link[base:lapply]{base::lapply()}} and
\code{\link[base:lapply]{base::sapply()}}. When using \code{lappli} and \code{sappli}, the function
passed into \code{FUN} may also have extra arguments \code{.i} (for item index) and
\code{.n} for item name.}

\item{...}{optional arguments to \code{FUN}.}

\item{simplify}{logical or character string; should the result be
    simplified to a vector, matrix or higher dimensional array if
    possible?  For \code{sapply} it must be named and not abbreviated.
    The default value, \code{TRUE}, returns a vector or matrix if appropriate,
    whereas if \code{simplify = "array"} the result may be an
    \code{\link[base]{array}} of \dQuote{rank}
    (\eqn{=}\code{length(dim(.))}) one higher than the result
    of \code{FUN(X[[i]])}.}

\item{USE.NAMES}{logical; if \code{TRUE} and if \code{X} is character,
    use \code{X} as \code{\link[base]{names}} for the result unless it had names
    already.  Since this argument follows \code{\dots} its name cannot
    be abbreviated.}
}
\description{
Improve \code{\link[base:lapply]{base::lapply()}} and \code{\link[base:lapply]{base::sapply()}} functions by allowing
extra arguments \code{.i} (item index) and \code{.n} (item name) to be passed
into the function given in \code{FUN}.
Besides this extra feature, there is no difference to \code{\link[base:lapply]{base::lapply()}} and
\code{\link[base:lapply]{base::sapply()}}.
}
\examples{
lappli(
  list(x1 = "x1", x2 = "x2"),
  function(x, before, .i, .n) paste0(before, "Entry-", .i, ": Argument ", .n, " = ", x),
  before = "###"
)
sappli(
  list(x1 = "x1", x2 = "x2"),
  function(x, before, .i, .n) paste0(before, "Entry-", .i, ": Argument ", .n, " = ", x),
  before = "###"
)
}
